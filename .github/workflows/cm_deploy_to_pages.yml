name: Deploy Critical Moments config to Github Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

# Default to bash
defaults:
  run:
    shell: bash

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5
      - name: Process Config Files
        run: |
          mkdir -p public
          template_config() {
            local config_file="$1"
            local localization_file="$2"
            local output_file="$3"
          
            # Load localization file into a variable
            local localization
            localization=$(cat "$localization_file")
          
            # Use jq to process placeholders
            jq -c --argjson loc "$localization" '
              def replace_placeholders(obj):
                if (obj | type == "string") then
                  obj | gsub("\\{\\{(.+?)\\}\\}"; .loc[.captures[0]] // .captures[0])
                elif (obj | type == "object") then
                  obj | with_entries(.value |= replace_placeholders)
                elif (obj | type == "array") then
                  obj | map(replace_placeholders)
                else obj end;
              . | replace_placeholders
            ' "$config_file" > "$output_file"
          }
          
          # Process each localization file
          for loc_file in localization-*.json; do
            language=$(echo "$loc_file" | sed -E 's/localization-(.*)\\.json/\\1/')
            output_file="./public/cmConfigSigned-${language}.cmconfig"
            template_config "config.json" "$loc_file" "$output_file"
          
            # Sign the generated config
            status_code=$(curl -s -X POST --data-binary @"$output_file" -w "%{response_code}" \
              --header "Content-Type: application/json" \
              https://criticalmoments.io/account/api/sign_config \
              -o "$output_file")
          
            if [ "$status_code" != "200" ]; then
              echo "Error signing config: $status_code for file $output_file"
              cat "$output_file"
              exit 1
            fi
          done

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
